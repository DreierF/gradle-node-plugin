import org.gradle.util.GradleVersion

plugins {
    id "com.github.node-gradle.node"
}

node {
    download = true
    workDir = file("build/node")
}

task env(type: NodeTask) {
    script = file("env.js")
    outputs.upToDateWhen {
        true
    }
}

if (isPropertyEnabled("changeOptions")) {
    env.options = ["--print", "1000 * 1000"]
}

if (isPropertyEnabled("changeEnv")) {
    def qualifier = "custom"
    env.environment = [CUSTOM: "${qualifier} value"]
}

if (isPropertyEnabled("changeWorkingDir")) {
    env.workingDir = file("${project.buildDir}/notExisting")
}

if (isPropertyEnabled("fail")) {
    env.args = ['fail']
}

if (isPropertyEnabled("ignoreExitValue")) {
    env.ignoreExitValue = true
}

if (isPropertyEnabled("outputFile")) {
    env.execOverrides {
        standardOutput = new FileOutputStream("${buildDir}/standard-output.txt")
    }
}

if (isPropertyEnabled("enableHooks")) {
    env.hooks {
        onSuccess {
            println("Env task success with status ${it.exitValue}")
        }
        onFailure {
            println("Env task failure with status ${it.exitValue}")
        }
    }
}

if (isPropertyEnabled("enableExpectFailureHook")) {
    env.hooks {
        onExecFinished {
            if (it.exitValue == 0) {
                throw new IllegalStateException("Should have failed")
            } else {
                println("Failed as expected")
            }
        }
    }
}

task version(type: NodeTask) {
    script = file("version.js")
}

def isPropertyEnabled(String name) {
    if (GradleVersion.current() >= GradleVersion.version("6.6")) {
        return providers.systemProperty(name).forUseAtConfigurationTime().isPresent()
    }
    return System.properties[name] != null
}
